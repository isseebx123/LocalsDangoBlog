---
layout: post
title:  "REST API"
date:   2018-04-26 22:36:00
author: 이상현
categories: Naver_Hackday_Ready
---

# REST API란? [youtube]("https://www.youtube.com/watch?v=80PbMwOquJs")
## REpresentational State Transfer
- 표현적인 상태 전달 ( 표현한 상태를 전달한다 )

## 클라이언트/서버
- 서로는 어떻게 구현되어있는지 알 수 없고 '일관적 규칙'으로 통신, 클라이언트와 서버는 독립적임.

## 정형화된 인터페이스
1. 리소스 식별
2. 표현을 통한 리소스 처리 - HTML/JSON/XML
3. 자기서술적 메시지 - 요청은 메시지/헤더의 메타데이터

## 계층 시스템

## 캐시

## 상태 없음(Stateless)
- 서버는 클라이언트의 상태를 관리할 필요가 없음

## 주문형 코드 (code-on-command)

## URI 식별자 설계
1. 마지막 문자로 '/'를 포함하지 않는다.
2. 가독성을 높이는 데에는 '-'를 사용한다.
3. 소문자만을 사용
4. URI에는 확장자를 넣지 않는다.
- header에 contenttype이나 accepttype을 줘서 알 수 있는 것임

## URI vs URL

## 리소스 형식
1. 도큐먼트(Document)
- 가장 기본이 되는 리소스 형식
- 데이터베이스의 레코드와 같은 것
ex) http://api.your-service-books.com/books/1으로 get요청을 하면 정보를 보내줌.

2. 컬렉션
- 도큐먼트의 리스트
ex) http://api.your-service-books.com/books으로 get요청을 하면 리스트로 정보를 보내줌.

3. 스토어

4. 컨트롤러
- CRUD 이외의 것
- CRUD: Create, Read, Update, Delete
ex) http://api.your-service-books.com/books/1/buy.. 1번 책을 구매하겠다

## 명명 규칙
- CRUD는 URI에 표시하지 않는다. ex) getBook, createBook X
- 도큐먼트: 단수
- 컬렉션: 복수
- 스토어: 복수
- 컨트롤러: 동사/동사구

## HTTP 프로토콜의 이용
1. 요청 메서드
2. 응답 상태 코드
3. 메시지 헤더
- 이를 이용해서 REST API를 구현

## 요청 메서드
1. GET: 리소스 상태
2. HEAD: 리소스의 메타 데이터
3. PUT: '스토어 리소스' 및 '리소스' 갱신
3. POST: 컬렉션에 리소스 추가/ 스토어에 리소스 추가/ 제한 없는 사용
- POST로 하지말아야 할것
- 1. 가지고 오는 것(get)
- 2. 저장하는 것(put:store)
- 3. 지우는 것(delete)
4. DELETE: 리소스 제거

## 응답 상태 코드
- 2xx: 정상 처리(성공)
- 3xx: 실패하지 않은 요청 중 비정상 처리
- 4xx: 비정상 처리(실패)
- 5xx: 서버 에러


# REST API란?
1. REST API 란
REST(REpresentational State Transfer) API(application program interface)의 약자로
프로그램(시스템)간에 HTTP 요청인 GET, PUT, POST, DELETE 를 사용하여
상태를 전송하는 방법입니다.

REST API는 서버가 클라이언트의 어떠한 상태값도 저장하지 않는 Stateless 합니다.
따라서 클라이언트는 매 요청시 자신을 인증하는 토큰이나 key등을 포함시켜 서버에 전송합니다.

- restful api의 5가지 특징
1) client - server
: 클라이언트와 서버가 서로 분리되어 개별적으로, 독립적으로 실행되어야 합니다.
즉 데이터구조나 서버의 데이터베이스 디자인에 영향을 주지 않으면서 모바일 프로그램이 변경 가능해야 합니다.

2) stateless
: 서버 또는 세션에 저장된 데이터에 의존하지 않고, 호출 자체에서 제공되는 데이터에만 의존하여 사용합니다.
정보를 식별하기 위한 데이터는 서버에 저장되지 않습니다. 각 호출에 API키, 토큰, 사용자 ID 등 필요한 데이터를 넣습니다.
이렇게 사용하면 일부의 데이터를 사용하는 대신 모든 데이터를 호출하기 때문에 API의 안정성을 높일 수 있습니다.

3) Cache
: stateless이기 때문에 대량의 요청을 처리하기 위해서 오버헤드가 될 수 있습니다. 그래서 캐시에 저장하는것을 장려합니다.

4) Uniform Interface
: 각각의 어플리케이션의 독립적인 개발을 허용하는 통일된 인터페이스를 가져야 합니다. 클라이언트와 서버 사이에 커뮤니케이션을하기 위해 URI, CRUD, JSON와 같은 표준화된 인터페이스를 가져야 합니다.

5) Layered System
Layered System은 각각의 Layer가 특정한 기능으로 구성된 시스템입니다. REST API 디자인에서 아키텍처의 여러 계층이 함께 작동하여 보다 확장성 있고 모듈화된 프로그램을 만드는 것과 같은 원칙이 적용됩니다.

2. REST URL 설계 방법
GET : 조회(SELECT)
POST : 저장(CREATE)
PUT : 수정(UPDATE)
DELETE : 삭제(DELETE)
로 사용을 합니다.

예를들어 게시판테이블의 1번 컬럼을 가져오는 URL을 표현하려면
GET   http://localhost/GET/게시판/1

위와 같이 표현을 했었으나 이미 GET 이라는 것이 조회의 의미를 가지고 있기 때문에
GET http://localhost/게시판/1
같이 표현을 합니다.

오래된 브라우저는 GET, POST만 사용가능합니다. 그래서 PUT, DELETE 요청을 할때에는
각 프레임워크에 맞게 고쳐 써야합니다.
라라벨의 경우 POST 메서드를 쓰고 <input type="hidden" name="_method" value="PUT"> 와 같이
힌트를 제공해서 사용합니다.


3. 인증방법
1) HTTP 기본 인증
Authorization 헤더에 아이디:비밀번호를 Base64로 인코딩한 문자열을 포함시켜 보내는 방식입니다.

단점 :
- 아이디와 비밀번호를 클라이언트에 저장해야 하기 때문에 노출되기가 싶습니다.
- 브라우저의 개발자 도구로 헤더를 볼 수 있습니다. Authorization 헤더의 값이 평문이라 누구 읽을 수 있습니다.

2) JWT 인증
HTTP 기본 인증을 해결위한 방법으로 JWT(Json Web Token) 인증이 있습니다. 사용자의 인증 정보 대신 토큰을 이용합니다.
클라이언트가 서버로부터 토큰을 제공받고 데이터를 요청할 때 Authorization 헤더에 토큰을 포함시켜 보냅니다.
토큰은 유효 기간이 있어 토큰이 탈취되어도 유효기간이 금방 만료됩니다.
그리고 JWT는 헤더.본문.서명이 한 쌍으로 동작하기 때문에 하나라도 변조되면 토큰은 무효가 됩니다.

3) Oauth 인증
개요 : OAuth는 트위터의 개발자를 비롯한 일련의 웹 개발자들이 오픈 API의 인증과 권한을 동시에 제공하는 인증 프로토콜을 찾다가 새롭게 만든 표준 사용자 인증 프로토콜입니다.

흐름
: Request Token의 요청과 발급 - 사용자 인증 페이지 호출 - 사용자 로그인 완료  - 사용자의 권한 요청 및 수락
Access Token 발급 - Access Token을 이용해 서비스 정보 요청

[출처] [REST API에 관하여]("https://blog.naver.com/lineout_official/221176265804")|작성자 MoonRoad
