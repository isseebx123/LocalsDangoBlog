---
layout: post
title:  "네이버 핵데이 리뷰"
date:   2018-05-23 10:20:00
author: 이상현
categories: Naver_Hackday_Ready
---

# 늦었지만 네이버 핵데이 리뷰를 해보고자 한다.
## 사람과의 마찰에 대한 부분은 최대한 객관적으로 쓴다고 다짐한다.
## 무엇을 배웠을까?
### 개발에서
1. Spring boot
- 개인적으로 책을 사서 공부했지만 JPA가 아닌 Mybatis를 하게되면서 책을 끝마칠 수 없었다.
- DTO와 Domain의 차이가 무엇일까? 왜 별도로 존재하며 항상 있어야 하는가?
- Controller가 Client의 요청을 받고, 요청으로 전달받은 값들을 잘 조정하여 Service가 처리한다.
- Service는 결과를 반환하며 Controller가 그 결과를 Client에게 전송한다.
2. Mybatis
- 단순한 SQL문의 작성이라면 가능하지만 동적 sql문을 작성하는데는 공부가 더 필요할 듯 하다.
- 데이터베이스로부터 결과를 받을 때는 도메인? DTO?로 담아서주던데 리스트타입에 넣어도 제대로 받아지는가?
- 저번에 했을 때는 리스트타입에 넣으면 제대로 받아지는 것 같이는 보이지 않았다.
- SQL문에서 구태여 AS를 하지않아도 알아서 들어간다던데 사실인가? 확인이 필요하다.
3. Postman
- 이 툴이 어떤 역할을 하는지 이제야 알게되었다.
- controller에서 만든 함수, 즉 API를 사용했을 때 제대로 동작하는지 확인을 할 수 있다.
- 나중에 백엔드를 한다면 꼭 쓸 것 같다.
4. Maven
- 학교에서 한 차례 했었지만 조금 애매한게 많았다. 지금은 다소 해결되었다.
- maven에서 빌드가 따로 있다는 것에 특히 신기했다.
5. Git과 Github
- 브랜치는 feature/기능이름 으로 보통 딴다고 한다.
- gitflow를 이용하면 개발, 배포, 핫픽스 등을 효과적으로 관리할 수 있는 것 같다. 한 번 알아보자.
- Intellij에서 git commit, git pull 등의 기능이 있고 그것을 많이 사용하는 것에 조금 놀랐다. 다 bash로 하는 줄 알았는데..
6. Webpack
- dev server 초기 설정을 준비하지 않아서 리액트에서 JQuery로 갈아타는 원인이 되었다.
- dev server도 몰랐고 Webpack도 몰랐는데 알아가지 왜 알아가지 않았을까?
- 꽤나 복잡하기 때문에 공부가 필요할 것 같다. 인프런의 강의를 한 번 들어보자.
7. Intellij
- 이번에 적용한 Google code style과 같은 Code style을 적용함으로써 각 개발자간에 띄워쓰기나 줄바꿈으로 인한 commit 변경사항을 방지한다.
- Alt를 누르고 왼쪽클릭으로 드래그하면 여러줄이 선택된다.
8. 리모트 서버
- 파일을 서버에 배포하는 것을 제대로 확인해두지 않았다.
- Mysql workbench에서 IP, 아이디, 패스워드만 있으면 db를 볼 수 있는 것이 신기했다.
- 애초에 아이디를 배정하는 것은 어떻게 한 것일까? 그것은 아마 workbench에서 부여한 것 같다.
- 처음에 ncloud쪽에 로그인을 하고 mysql을 생성?하는 것 같다.

### 기술에서
1. Java8
- 알아본다 알아본다 해놓고는 찾아보지 않은 것 같다.
- 멘토님 말씀으로는 stream이나 builder패턴 등이 혁신적인 방법이라고 한다.
2. 문서작성(요구사항 분석, 설계)
- 학교에서는 거의 아는사람과, 친구와 하다보니 모르는 다른 사람과 하는 것이 어떤 느낌인지 잊고있었다.
- 정말 단 하나의 애매함도 없게 해야한다. 그런데 오버스펙이면 안된다. 이 경계를 아직도 찾기 힘든 것 같다.
- 요구사항 분석에는 기술내용이 들어가지 않는다. 더 중요하지만 작성하는데는 대체로 더 편한 것 같다.
- 설계는 어떻게 개발할 것이고, 무엇을 쓸 것인지 등이 자세하게 적혀있어야 한다.
- 설계가 다 되면 개발이 다 되었다고 보는 것 같다.
- 설계를 통해 개발이 가능한지, 불가능한지 알고 다른 방법으로 대체하는 등의 행동을 취할 수 있다.
- ovenapp 등을 통해 하는 UI설계는 마크업을 의미하는 것 같다. 즉 디자인을 만드는 것이지 UI설계는 아니다.
- UI설계라 하면 UI를 어떻게 개발할 것인지가 적혀야 한다. 리액트라면 어떻게 상태를 전달하고, 어떻게 모듈을 나누는 등..
- Flowchart를 작성하려면 ui가 어떻게 돌아가는지 배제하고, 유효성검사에 대한 부분을 중점으로 둔다.
3. ER 다이어그램
- ER 다이어그램 설계와 도메인 설계의 차이에 주목해보자.
- 순서는 도메인 설계가 먼저인 것이 맞는가? 도메인은 데이터베이스를 신경쓰지 않고 만드는 것이라고 한다.
- 도메인은 다른 도메인을 객체지향의 인스턴스처럼 가지던데 이것이 가지는 정확한 의미는 무엇일까?
- 도메인과 ER이 즉 해커톤 당시 domain과 DTO를 의미하는 것 같다.
- 1:1, 1:n, n:m 관계에 주목하자.
- 해커톤에서 했던 설계는 잘못되었다고 볼 수 있다. 연락처 하나를 조회하는데 많은 LEFT JOIN을 발생시킨다.
- 결국 ER설계가 performance를 좌지우지한다.
4. 소통
- 무조건적인 비난은 하면 안되지만, 조금이라도 이유가 있다면 말을 해서 같이 생각해봐야 한다.
- 일방적인 강요를 받는 입장이라면 상대방의 입장에서 생각해보자. 무엇이 그 사람으로 하여금 나를 강요하게 만드는지.
- 일방적인 강요를 하는 입장이라면 내가 왜 강요를 하는지 생각해보자. 지금까지 한 노력이 물거품이 될까봐인가? 내가 잘 못할거라 미리 생각하기 때문인가?
- 개발에 잘난 척은 배제해야한다. 못하는 것은 못한다고 미리 말하자. 이거는 이번에 잘 지켰던 것 같다.
- 내가 아는 기술이라고 무조건적으로 쓰려고 하지말자. 이번에 팀원이 그런 성향이 강해서 조금 난처했다.
- 예를들어 자기가 기존에 썼던 코드를 그대로 가져다 쓴다던지, 기존에 폴더 depth를 적용한다던지, 기존에 코딩 스타일을 고집한다던지.. 너무심했다.
- 심해서 기존에 코드는 쓰지 않는게 좋겠다라고 말했지만 내 말을 듣지 않고 그냥 PR을 하더라. 이거는 팀원인 난의 의견을 무시한 것이 아닐까? 내 손을 떠나버린 것 같다.
- 나는 그런게 없었을까? 일단 팀원이나 멘토가 나에게 지적사항을 말해주면 바로바로 수정했던 것 같다.

## 무슨 생각이 들고 있을까?
### 리액트에서 jQuery로
- 리액트에서 jQuery로 갈아타면서 1차 멘붕이 왔었던 건 사실이었다.
- 멘토님에게 더 확실히 말해야 했을까? 하지만 dev server를 세팅하지 못했기에 jQuery로 바꾼 것이 더 좋은 생각이었을 지도 모른다.
- 하지만 기초설계를 이미 React로 해놓은 상황이었기에, 결국에는 모든기능을 구현하지는 못했지만 확실히 옮겨타는데에는 로드가 있었다.
- 자초지종을 팀원에게 말했지만 반응이 시큰둥한 것 같았다. 왜일까? 물어보지는 않았지만 팀원이 리액트 준비를 많이 안했던 것 같다.
- 그리고 그는 dev server설정에도 신경을 쓰지 않고 샤워를 하고 왔기에.. 리액트던지 jQuery던지 애초에 상관이 없었던 것 같다.
- 결과적으로 jQuery를 하는 것이 나에게는 더 편했고, 팀원은 고전을 겪었기에 그는 뭐가 더 편했을지는 잘 모르겠다.
- 지금 생각해도 갈아타는 것에 대해서는 적어도 멘티간에라도 더 얘기했어야 했던 것 같다.
### 아직 모르는게 많구나
- database는 일반적인 query만 짜고 database테이블만 만들면, jdbc라이브러리나 php로 하면 잘 되는줄 알았다.
- 뭐 실무에서 어떤 곳은 php로 하는 곳도 있다고 했으니 이 부분에 대해서는 크게 신경쓰지 않아도 될 것 같다.
- mybatis니 jpa니 존재도 몰랐고 도메인과 ER의 차이점도 자세하게는 인지하지 못했었다.
- 리모트서버 연결이나, workbench를 사용하는 방법, 이를 스프링부트에서 사용하는 방법도 잘 몰랐었다.
- 리액트를 하는데 redux를 조금 보고 갔어야 했을까? redux없이 코드를 구현했었는데 안되는 것은 아니지만 좀 더 알아보고 갔으면 좋았을 것 같다.
- 그래도 16.3부터는 redux없이 context api를 사용한다고 하니 이를 공부하면 될 것 같다.
- 고전을 겪고 해결을 하지 못했던 webpack의 dev server는 인프런 강의를 통해서 해결하기로 하자.
- 스프링프레임워크를 할때는 엄청 불편했다고들 하는데 프레임워크를 공부해야봐야 하는 걸까?
- 어떤 기술을 특히 잘하는 것은 중요하지 않다고 말씀하셨다. 그것을 잘하더라도 실무에서 그것을 사용하지 못하고 다른 것을 사용해야 할 수도 있기 때문이다.
- 추가로 jsp도 사용하기 때문에 중요하다고 했던 것 같다.
